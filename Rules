#!/usr/bin/env ruby

preprocess do
    @items.each do |item|
        if item[:published]
            item[:published] = DateTime.parse(item[:published].to_s)
        end
        if item[:updated]
            item[:updated] = DateTime.parse(item[:updated].to_s)
        end
        if item[:tags]
            item[:tags] = item[:tags].split(",").map{|t| t.strip}
        end
    end
    tags.each do |tag|
        content = '<%= box(with_tag("'+tag+'")) %>'
        title = "Content with tag '#{tag}'"
        identifier = "/tag/#{tag}/"
        @items << Nanoc::Item.new(content, {:title => title, :noindex => true}, identifier)
    end
    categories.each do |name, items|
        content = "<%= box(categories[\"#{name}\"]) %>"
        title = "#{name}"
        identifier = "/#{name.downcase}/"
        @items << Nanoc::Item.new(content, {:title => title, :headless => true, :noindex => true}, identifier)
    end

    content = "<%= box(things) %>"
    title = "Archive"
    identifier = "/archive/"
    @items << Nanoc::Item.new(content, {:title => title, :noindex => true}, identifier)

    # rebuild these variables for each compilation
    $categories = nil
    $things = nil
end

compile '/assets/style/' do
    filter :sass, syntax: :scss
end

compile '/feed/' do
    filter :erb
end

compile '/googlec25b04cecd642132/' do
end

compile '*/view/' do
end

compile '*/thumbnail/' do
    unless item[:extension] == "svg"
        filter :thumbnailize, :width => 200
    end
end

compile '*' do
    unless item.binary?
        filter :erb
        filter :absolutize_paths
        filter :kramdown
        layout 'default'
        if item[:title]
            filter :tidy
        end
    end
end

compile '*', :rep => :titlepage do
    if item[:extension] =~ Regexp.new("pdf$")
        filter :titlepageize
    end
end

route '/assets/style/' do
    item.identifier.chop + '.css'
end

route '/googlec25b04cecd642132/' do
    item.identifier.chop + '.html'
end

route '*' do
    if item.binary?
        item.identifier.chop + '.' + item[:extension]
    else
        item.identifier + 'index.html'
    end
end

route '*', :rep => :titlepage do
    if item[:extension] =~ Regexp.new("pdf$")
        item.identifier.chop + '-titlepage.svg'
    else
        nil
    end
end

layout '*', :erb
